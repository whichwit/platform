# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy SQL assets
on:
  push:
    branches:
      - main
      - test
    paths:
      - 'sql/src/**.sql'  
jobs:
  # sql_testing:
  #   runs-on: ubuntu-latest
  #   env:
  #     ARTIFACT: ${{ github.workspace }}/_artifact
  #   services:
  #     # Label used to access the service container
  #     mssql:
  #       # Docker Hub image
  #       image: mcr.microsoft.com/mssql/server
  #       env:
  #         ACCEPT_EULA: Y
  #         SA_PASSWORD: Password1!
  #       ports:
  #         - 1433:1433
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 2
  #     - name: Get npm cache directory
  #       id: npm-cache-dir
  #       run: |
  #         echo "::set-output name=dir::$(npm config get cache)"
  #     - uses: actions/cache@v2
  #       id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
  #       with:
  #         path: ${{ steps.npm-cache-dir.outputs.dir }}
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-
  #     - run: npm ci
  #     - name: Execute unit test
  #       run: bazelisk test //...
  #     - run: mkdir -p ${{ env.ARTIFACT }}
  #     - run: cp $(git diff-tree --no-commit-id --name-only -r --diff-filter=d ${{ github.sha }} -- sql/src) ${{ env.ARTIFACT }}
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: artifact-sql
  #         path: ${{ env.ARTIFACT }}/*.sql
  #         retention-days: 1
  sql_deploy:
    needs: sql_testing
    runs-on: [self-hosted, vm1]
    env:
      ARTIFACT: ${{ github.workspace }}/_artifact
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Check branches (main)
        if: github.ref == 'refs/heads/main'
        run: echo "Deploying to production server on branch $GITHUB_REF"
      - name: Check branches (test)
        if: github.ref == 'refs/heads/test'
        run: echo "Deploying to production server on branch $GITHUB_REF"
      # - uses: actions/download-artifact@v2
      #   with:
      #     name: artifact-sql
      #     path: ${{ env.ARTIFACT }}
      # - name: Get npm cache directory
      #   id: npm-cache-dir
      #   run: |
      #     echo "::set-output name=dir::$(npm config get cache)"
      # - uses: actions/cache@v2
      #   id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: ${{ steps.npm-cache-dir.outputs.dir }}
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      # - run: npm ci
      - name: Deploy to database (PROD)
        if: github.ref == 'refs/heads/main'
        run: |
          sqlcmd -S ${{ secrets.SCMDB_SERVER_TEST }} -d ${{ secrets.SCMDB_DATABASE_TEST }} -U ${{ secrets.SCMDB_USERNAME_TEST }} -P ${{ secrets.SCMDB_PASSWORD_TEST }} -i $(git diff-tree --no-commit-id --name-only -r --diff-filter=d ${{ github.sha }} -- sql/src)



  # runner_test:
  #   runs-on: self-hosted
  #   needs: sql_testing
  #   env:
  #     ARTIFACT: ${{ github.workspace }}/_artifact
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact-sql
  #         path: ${{ env.ARTIFACT }}
  #     - run: ls -r
